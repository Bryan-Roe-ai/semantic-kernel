{
  "name": "ChatBot",
  "template_format": "semantic-kernel",
  "description": "A chat bot that helps the user tell the date and time.",
  "input_variables": [
    {
      "name": "chat_history",
      "description": "The on-going chat history",
      "is_required": true
    },
    {
      "name": "user_input",
      "description": "The user input",
      "is_required": true
    }
  ],
  "execution_settings": {
    "chat": {
      "function_choice_behavior": {
        "type": "auto",
        "maximum_auto_invoke_attempts": 5,
        "functions": [
          "time.date",
          "time.time",
          "math.Add"
        ]
      }
    }
  }
}

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const expressRateLimit = require('express-rate-limit');
const expressCompression = require('compression');
const morgan = require('morgan');
require('dotenv').config();

// Create Express app
const app = express();

// Trust proxy if behind reverse proxy
app.set('trust proxy', 1);

// Configure security middleware
app.use(helmet({
  contentSecurityPolicy: true,
  crossOriginEmbedderPolicy: true
}));

// Configure CORS
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS?.split(',') || '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Configure compression
app.use(expressCompression());

// Configure request logging
app.use(morgan('combined'));

// Configure rate limiting
const limiter = expressRateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  standardHeaders: true,
  legacyHeaders: false,
  message: 'Too many requests from this IP, please try again later'
});

// Apply rate limiting to all routes
app.use(limiter);

// Parse JSON payloads
app.use(express.json({ limit: '10kb' }));

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'healthy' });
});

// Global error handler
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    status: 'error',
    message: process.env.NODE_ENV === 'production' ? 'Internal server error' : err.message
  });
});

// Configure port
const PORT = process.env.PORT || 3000;

// Start server with graceful shutdown
const server = app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

// Graceful shutdown handling
process.on('SIGTERM', () => {
  console.log('SIGTERM received. Shutting down gracefully...');
  server.close(() => {
    console.log('Process terminated');
    process.exit(0);
  });
});
