name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # Matrix strategy to test across multiple environments
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc, clang]
    runs-on: ${{ matrix.os }}

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up the necessary compiler and tools
    - name: Setup Compiler
      run: |
        if [[ "${{ matrix.compiler }}" == "gcc" ]]; then
          sudo apt-get install gcc;
        elif [[ "${{ matrix.compiler }}" == "clang" ]]; then
          sudo apt-get install clang;
        fi

    # Step 3: Cache dependencies to speed up builds
    - name: Cache build dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache
        key: ${{ runner.os }}-${{ matrix.compiler }}-build-${{ hashFiles('**/Makefile') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler }}-build-

    # Step 4: Configure the project
    - name: Configure
      run: ./configure
      env:
        CC: ${{ matrix.compiler }}
        CXX: ${{ matrix.compiler }}++

    # Step 5: Build the project
    - name: Build
      run: make

    # Step 6: Run lint
    - name: Run lint
      run: npm run lint

    # Step 7: Run tests
    - name: Run Tests
      run: make check

    # Step 8: Perform a distribution check
    - name: Distribution Check
      run: make distcheck

    # Step 9: Upload build artifacts
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-results
        path: ./build

    # Step 10: Debugging information
    - name: Debug Info
      if: failure()
      run: |
        uname -a
        lsb_release -a || true
        gcc --version || true

    # Step 11: Clean up temporary files and directories
    - name: Clean up temporary files and directories
      run: sudo rm -rf /tmp/*

    # Step 12: Prune Docker system
    - name: Prune Docker system
      run: docker system prune -f

    # Step 13: Verify available disk space
    - name: Verify available disk space
      run: df -h
