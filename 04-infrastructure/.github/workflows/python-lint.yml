name: Python Code Quality Checks

on:
  workflow_dispatch:
  pull_request:
    branches: ["main", "feature*"]
    paths:
      - "python/**"

jobs:
  pre-commit:
    if: '!cancelled()'
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        working-directory: python
    env:
      # Configure a constant location for the uv cache
      UV_CACHE_DIR: /tmp/.uv-cache
      UV_PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      # Add more steps as needed

  ruff:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        working-directory: python
    env:
      # Configure a constant location for the uv cache
      UV_CACHE_DIR: /tmp/.uv-cache
    steps:
      - uses: actions/checkout@v4
      - name: Set up uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
      - name: Install poetry
        run: pipx install poetry
      - name: Install SemanticKernel
        run: cd python && poetry install --no-ansi
      - name: Run lint
        run: cd python && poetry run ruff check .

  black:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
      - name: Install poetry
        run: pipx install poetry
      - name: Install SemanticKernel
        run: cd python && poetry install --no-ansi
      - name: Run lint
        run: cd python && poetry run black --check .
      - name: Install dependencies
        run: cd python && poetry install
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{  env.UV_CACHE_DIR  }}
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
      - name: Install the project
        run: uv sync --all-extras --dev
      - name: Run Pre-Commit Hooks
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --config python/.pre-commit-config.yaml --all-files
      - name: Run Mypy
        run: uv run mypy -p semantic_kernel --config-file mypy.ini
      - name: Minimize uv cache
        run: uv cache prune --ci
