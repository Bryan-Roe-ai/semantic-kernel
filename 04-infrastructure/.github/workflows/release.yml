name: Release & Deployment

on:
  push:
    tags:
      - "v*"
      - "dotnet-*"
      - "python-*"
      - "java-*"
      - "typescript-*"
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      component:
        description: "Component to release"
        required: true
        type: choice
        options:
          - all
          - dotnet
          - python
          - java
          - typescript

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Determine what to release
  plan-release:
    name: Plan Release
    runs-on: ubuntu-latest
    outputs:
      dotnet: ${{ steps.plan.outputs.dotnet }}
      python: ${{ steps.plan.outputs.python }}
      java: ${{ steps.plan.outputs.java }}
      typescript: ${{ steps.plan.outputs.typescript }}
      version: ${{ steps.plan.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Plan release
        id: plan
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            component="${{ github.event.inputs.component }}"
            if [[ "$component" == "all" || "$component" == "dotnet" ]]; then
              echo "dotnet=true" >> $GITHUB_OUTPUT
            fi
            if [[ "$component" == "all" || "$component" == "python" ]]; then
              echo "python=true" >> $GITHUB_OUTPUT
            fi
            if [[ "$component" == "all" || "$component" == "java" ]]; then
              echo "java=true" >> $GITHUB_OUTPUT
            fi
            if [[ "$component" == "all" || "$component" == "typescript" ]]; then
              echo "typescript=true" >> $GITHUB_OUTPUT
            fi
            echo "version=manual-${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # Tag-based release
            tag="${{ github.ref_name }}"
            if [[ "$tag" == dotnet-* ]]; then
              echo "dotnet=true" >> $GITHUB_OUTPUT
            elif [[ "$tag" == python-* ]]; then
              echo "python=true" >> $GITHUB_OUTPUT
            elif [[ "$tag" == java-* ]]; then
              echo "java=true" >> $GITHUB_OUTPUT
            elif [[ "$tag" == typescript-* ]]; then
              echo "typescript=true" >> $GITHUB_OUTPUT
            elif [[ "$tag" == v* ]]; then
              echo "dotnet=true" >> $GITHUB_OUTPUT
              echo "python=true" >> $GITHUB_OUTPUT
              echo "java=true" >> $GITHUB_OUTPUT
              echo "typescript=true" >> $GITHUB_OUTPUT
            fi
            echo "version=$tag" >> $GITHUB_OUTPUT
          fi

  # Release .NET packages
  release-dotnet:
    name: Release .NET
    runs-on: ubuntu-latest
    needs: plan-release
    if: needs.plan-release.outputs.dotnet == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore and build
        run: |
          cd dotnet
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Run tests
        run: |
          cd dotnet
          dotnet test --configuration Release --no-build

      - name: Pack packages
        run: |
          cd dotnet
          dotnet pack --configuration Release --no-build --output ./packages

      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          cd dotnet
          dotnet nuget push ./packages/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate

  # Release Python packages
  release-python:
    name: Release Python
    runs-on: ubuntu-latest
    needs: plan-release
    if: needs.plan-release.outputs.python == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          cache: 'pip'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          cd python
          python -m build

      - name: Test package
        run: |
          cd python
          pip install pytest
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pytest

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd python
          twine upload dist/* --skip-existing

  # Release Java packages
  release-java:
    name: Release Java
    runs-on: ubuntu-latest
    needs: plan-release
    if: needs.plan-release.outputs.java == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Build and test
        run: |
          cd java
          if [ -f "gradlew" ]; then
            ./gradlew clean build test
          else
            gradle clean build test
          fi

      - name: Publish to Maven Central
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        run: |
          cd java
          if [ -f "gradlew" ]; then
            ./gradlew publish
          else
            gradle publish
          fi

  # Release TypeScript packages
  release-typescript:
    name: Release TypeScript
    runs-on: ubuntu-latest
    needs: plan-release
    if: needs.plan-release.outputs.typescript == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: 'npm'
          cache: 'npm'
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install and build
        run: |
          if [ -d "typescript" ]; then
            cd typescript
            npm ci
            npm run build
            npm test
          fi

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ -d "typescript" ]; then
            cd typescript
            npm publish --access public
          fi

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      [
        plan-release,
        release-dotnet,
        release-python,
        release-java,
        release-typescript,
      ]
    if: always() && (needs.release-dotnet.result == 'success' || needs.release-python.result == 'success' || needs.release-java.result == 'success' || needs.release-typescript.result == 'success')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog between tags
          if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
            previous_tag=$(git describe --tags --abbrev=0 HEAD~1)
            echo "## Changes since $previous_tag" > CHANGELOG.md
            git log --oneline $previous_tag..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            git log --oneline >> CHANGELOG.md
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.plan-release.outputs.version }}
          release_name: Release ${{ needs.plan-release.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(needs.plan-release.outputs.version, 'alpha') || contains(needs.plan-release.outputs.version, 'beta') || contains(needs.plan-release.outputs.version, 'rc') }}
