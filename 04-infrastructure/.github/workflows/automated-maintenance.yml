name: Automated Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  cleanup-workspace:
    name: Clean up workspace
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run workspace cleanup
        run: |
          echo "Running automated workspace cleanup..."
          if [ -f "./cleanup-workspace.sh" ]; then
            chmod +x ./cleanup-workspace.sh
            ./cleanup-workspace.sh
          fi

      - name: Remove temporary files
        run: |
          # Remove common temporary files
          find . -name "*.tmp" -type f -delete
          find . -name "*.temp" -type f -delete
          find . -name ".DS_Store" -type f -delete
          find . -name "Thumbs.db" -type f -delete

          # Clean up Python cache
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -type f -delete

          # Clean up Node.js cache
          find . -name "node_modules/.cache" -type d -exec rm -rf {} + 2>/dev/null || true

      - name: Update package versions
        run: |
          echo "Checking for package updates..."
          # Update Python packages
          if [ -f "requirements.txt" ]; then
            pip list --outdated --format=json > outdated_packages.json
            if [ -s outdated_packages.json ]; then
              echo "Found outdated Python packages"
              # Create issue for outdated packages
              gh issue create \
                --title "Automated: Outdated Python packages detected" \
                --body "The following Python packages need updating: $(cat outdated_packages.json)" \
                --label "maintenance,dependencies" || true
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for large files
        run: |
          echo "Checking for large files..."
          large_files=$(find . -type f -size +50M -not -path "./.git/*" | head -10)
          if [ ! -z "$large_files" ]; then
            echo "Large files found:"
            echo "$large_files"
            gh issue create \
              --title "Automated: Large files detected in repository" \
              --body "The following large files were found and may need attention: $large_files" \
              --label "maintenance,cleanup" || true
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit cleanup changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "Automated workspace cleanup [skip ci]" || echo "Nothing to commit"
            git push || echo "Nothing to push"
          fi

  update-documentation:
    name: Update documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache: 'pip'

      - name: Update repository index
        run: |
          echo "Updating repository index..."
          python scripts/update_repository_index.py || echo "Index update script not found"

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/workflows/markdown-link-check-config.json'

      - name: Generate workspace status
        run: |
          echo "# Workspace Status Report" > WORKSPACE_STATUS.md
          echo "Generated on: $(date)" >> WORKSPACE_STATUS.md
          echo "" >> WORKSPACE_STATUS.md
          echo "## File Count by Type" >> WORKSPACE_STATUS.md
          find . -type f -name "*.py" | wc -l | sed 's/^/Python files: /' >> WORKSPACE_STATUS.md
          find . -type f -name "*.cs" | wc -l | sed 's/^/C# files: /' >> WORKSPACE_STATUS.md
          find . -type f -name "*.js" -o -name "*.ts" | wc -l | sed 's/^/JavaScript\/TypeScript files: /' >> WORKSPACE_STATUS.md
          find . -type f -name "*.java" | wc -l | sed 's/^/Java files: /' >> WORKSPACE_STATUS.md
          find . -type f -name "*.md" | wc -l | sed 's/^/Markdown files: /' >> WORKSPACE_STATUS.md
          echo "" >> WORKSPACE_STATUS.md
          echo "## Recent Activity" >> WORKSPACE_STATUS.md
          git log --oneline -10 >> WORKSPACE_STATUS.md

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet && git diff --staged --quiet; then
            echo "No documentation changes to commit"
          else
            git add .
            git commit -m "Automated documentation update [skip ci]" || echo "Nothing to commit"
            git push || echo "Nothing to push"
          fi
