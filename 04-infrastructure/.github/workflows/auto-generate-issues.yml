name: Auto Generate Issues

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  generate-issues:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Step 3: Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests PyGithub

      # Step 4: Check if scripts exist before running
      - name: Check script availability
        id: check_scripts
        run: |
          echo "generate_issues_exists=$([ -f 'scripts/generate_issues.py' ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "check_best_practices_exists=$([ -f 'scripts/check_best_practices.py' ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "notify_approvers_exists=$([ -f 'scripts/notify_approvers.py' ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "setup_logging_exists=$([ -f 'scripts/setup_logging.py' ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      # Step 5: Generate issues (if script exists)
      - name: Generate issues
        if: steps.check_scripts.outputs.generate_issues_exists == 'true'
        env:
          PYTHONPATH: scripts
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Generating issues based on predefined criteria and templates..."
          python scripts/generate_issues.py

      # Step 6: Ensure best practices adherence (if script exists)
      - name: Ensure best practices adherence
        if: steps.check_scripts.outputs.check_best_practices_exists == 'true'
        run: |
          echo "Ensuring generated issues adhere to best practices..."
          python scripts/check_best_practices.py

      # Step 7: Notify trusted people for approval (if script exists)
      - name: Notify trusted people for approval
        if: steps.check_scripts.outputs.notify_approvers_exists == 'true'
        run: |
          echo "Notifying trusted people for approval..."
          python scripts/notify_approvers.py

      # Step 8: Enhanced logging and monitoring (if script exists)
      - name: Enhanced Logging and Monitoring
        if: steps.check_scripts.outputs.setup_logging_exists == 'true'
        run: |
          echo "Setting up enhanced logging and monitoring..."
          python scripts/setup_logging.py

      # Step 9: Create issue generation summary
      - name: Create Summary
        run: |
          echo "## Issue Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Generate Issues Script: ${{ steps.check_scripts.outputs.generate_issues_exists }}" >> $GITHUB_STEP_SUMMARY
          echo "- Best Practices Script: ${{ steps.check_scripts.outputs.check_best_practices_exists }}" >> $GITHUB_STEP_SUMMARY
          echo "- Notify Approvers Script: ${{ steps.check_scripts.outputs.notify_approvers_exists }}" >> $GITHUB_STEP_SUMMARY
          echo "- Setup Logging Script: ${{ steps.check_scripts.outputs.setup_logging_exists }}" >> $GITHUB_STEP_SUMMARY

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    timeout-minutes: 15
    strategy:
      matrix:
        language: [python, node]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Setup Node.js
        if: matrix.language == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Setup environment and run language-specific linting
      - name: Run ${{ matrix.language }} linting
        run: |
          case "${{ matrix.language }}" in
            python)
              python -m pip install --upgrade pip
              pip install flake8 black
              echo "Running Python linting..."
              if find . -name "*.py" -type f | head -1 | read; then
                flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,env,.venv,.env
                flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=venv,env,.venv,.env
                black --check --diff . --exclude="/(venv|env|\.venv|\.env)/"
              else
                echo "No Python files found to lint"
              fi
              ;;
            node)
              if [ -f "package.json" ]; then
                npm ci
                npm run lint --if-present
              else
                echo "No package.json found, skipping Node.js linting"
              fi
              ;;
          esac
