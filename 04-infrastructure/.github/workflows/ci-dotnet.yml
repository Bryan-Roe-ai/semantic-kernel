name: .NET CI/CD

on:
  push:
    branches: [main, develop, "feature/*", "release/*"]
    paths:
      - "dotnet/**"
      - ".github/workflows/ci-dotnet.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "dotnet/**"
      - ".github/workflows/ci-dotnet.yml"
  workflow_dispatch:

env:
  DOTNET_VERSION: "8.0.x"
  CONFIGURATION: Release
  COVERAGE_THRESHOLD: 80

jobs:
  # Build and test .NET projects
  build-and-test:
    name: Build & Test .NET
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target-framework: ["net6.0", "net8.0"]
        configuration: [Debug, Release]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |
          cd dotnet
          dotnet restore

      - name: Build
        run: |
          cd dotnet
          dotnet build --no-restore --configuration ${{ matrix.configuration }}

      - name: Test
        run: |
          cd dotnet
          dotnet test --no-build --configuration ${{ matrix.configuration }} \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults/ \
            --logger "trx;LogFileName=test-results.trx"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.target-framework }}-${{ matrix.configuration }}
          path: dotnet/TestResults/

      - name: Code Coverage Report
        uses: codecov/codecov-action@v4
        if: matrix.configuration == 'Release'
        with:
          directory: dotnet/TestResults/
          flags: dotnet
          name: dotnet-coverage

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build for CodeQL
        run: |
          cd dotnet
          dotnet build --configuration Release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Package and publish
  package:
    name: Package NuGet
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Create packages
        run: |
          cd dotnet
          dotnet pack --configuration Release --output ./packages

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: dotnet/packages/*.nupkg

      - name: Publish to NuGet (on release)
        if: startsWith(github.ref, 'refs/tags/dotnet-')
        run: |
          cd dotnet
          dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
