name: 'Attest Build Provenance'
description: 'Generate provenance attestations for build artifacts'

inputs:
  subject-path:
    description: >
      Path(s) to artifacts to attest. Specify only one of 'subject-path', 'subject-digest', or 'subject-checksums'.
    required: false
  subject-digest:
    description: >
      Digest in "algo:hex" form. Specify only one of 'subject-path', 'subject-digest', or 'subject-checksums'.
    required: false
  subject-name:
    description: >
      Subject name for the attestation. Required if using 'subject-digest'.
    required: false
  subject-checksums:
    description: >
      Path to checksums file with digest+name. Specify only one input type.
    required: false
  push-to-registry:
    description: >
      Push provenance to registry. Requires 'subject-name' (FQIN) and 'subject-digest'.
    default: 'false'
    required: false
  show-summary:
    description: >
      Attach attestation summary to workflow run.
    default: 'true'
    required: false
  github-token:
    description: >
      GitHub token for API requests.
    default: ${{ github.token }}
    required: false

outputs:
  bundle-path:
    description: 'Path to the attestation bundle file.'
    value: ${{ steps.attest.outputs.bundle-path }}
  attestation-id:
    description: 'Attestation ID.'
    value: ${{ steps.attest.outputs.attestation-id }}
  attestation-url:
    description: 'Attestation summary URL.'
    value: ${{ steps.attest.outputs.attestation-url }}

runs:
  using: 'composite'
  steps:
    # Validate that only one subject input is set
    - name: Validate subject input
      shell: bash
      run: |
        set -euo pipefail

        # Count non-empty inputs
        count=0
        [[ -n "${{ inputs.subject-path }}" ]] && ((count++))
        [[ -n "${{ inputs.subject-digest }}" ]] && ((count++))
        [[ -n "${{ inputs.subject-checksums }}" ]] && ((count++))

        if [[ $count -eq 0 ]]; then
          echo "::error::Must specify exactly one of: subject-path, subject-digest, or subject-checksums"
          exit 1
        elif [[ $count -gt 1 ]]; then
          echo "::error::Only one subject input type is allowed. Specified: $count inputs"
          exit 1
        fi

        # Validate subject-digest requires subject-name
        if [[ -n "${{ inputs.subject-digest }}" && -z "${{ inputs.subject-name }}" ]]; then
          echo "::error::subject-name is required when using subject-digest"
          exit 1
        fi

        # Validate push-to-registry requirements
        if [[ "${{ inputs.push-to-registry }}" == "true" ]]; then
          if [[ -z "${{ inputs.subject-name }}" || -z "${{ inputs.subject-digest }}" ]]; then
            echo "::error::push-to-registry requires both subject-name and subject-digest"
            exit 1
          fi
        fi

    - name: Generate Build Provenance Predicate
      uses: actions/attest-build-provenance/predicate@v1.1.5
      id: generate-build-provenance-predicate

    - name: Generate Attestation
      uses: actions/attest@v2.4.0
      id: attest
      with:
        subject-path: ${{ inputs.subject-path }}
        subject-digest: ${{ inputs.subject-digest }}
        subject-name: ${{ inputs.subject-name }}
        subject-checksums: ${{ inputs.subject-checksums }}
        predicate-type: ${{ steps.generate-build-provenance-predicate.outputs.predicate-type }}
        predicate: ${{ steps.generate-build-provenance-predicate.outputs.predicate }}
        push-to-registry: ${{ inputs.push-to-registry }}
        show-summary: ${{ inputs.show-summary }}
        github-token: ${{ inputs.github-token }}

    - name: Output attestation details
      if: inputs.show-summary == 'true'
      shell: bash
      run: |
        set -euo pipefail

        echo "::notice title=Attestation Generated::Successfully created build provenance attestation"
        echo "Bundle Path: ${{ steps.attest.outputs.bundle-path }}"
        echo "Attestation ID: ${{ steps.attest.outputs.attestation-id }}"
        echo "Attestation URL: ${{ steps.attest.outputs.attestation-url }}"

        # Add to job summary if available
        if [[ -n "${GITHUB_STEP_SUMMARY:-}" ]]; then
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
        ## 🛡️ Build Provenance Attestation

        **Status:** ✅ Successfully generated

        | Property | Value |
        |----------|-------|
        | Bundle Path | \`${{ steps.attest.outputs.bundle-path }}\` |
        | Attestation ID | \`${{ steps.attest.outputs.attestation-id }}\` |
        | Attestation URL | [${{ steps.attest.outputs.attestation-url }}](${{ steps.attest.outputs.attestation-url }}) |
        EOF
        fi
