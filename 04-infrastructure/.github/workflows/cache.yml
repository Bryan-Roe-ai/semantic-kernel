name: Cache Dependencies

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  cache:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [18.x]
        python-version: ['3.10']

    steps:
      # 1. Version Setup
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      # 2. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 3. Cache Node.js dependencies
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      # 4. Cache Python dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      # 5. Install Node.js dependencies (only if package-lock.json exists)
      - name: Install Node.js dependencies
        if: hashFiles('**/package-lock.json') != ''
        run: npm ci

      # 6. Install Python dependencies (only if requirements.txt exists)
      - name: Install Python dependencies
        if: hashFiles('**/requirements.txt') != ''
        run: pip install -r requirements.txt

      # 7. Lint Node.js
      - name: Run lint
        run: npm run lint

      # 8. Input Validation
      - name: Input Validation
        run: |
          echo "Validating inputs..."
          python scripts/validate_inputs.py

      # 9. Graceful Degradation
      - name: Graceful Degradation
        run: |
          echo "Implementing graceful degradation mechanisms..."
          python scripts/graceful_degradation.py

      # 10. Clean up temporary files (be specific)
      - name: Clean up workflow temporary files
        run: sudo rm -rf /tmp/*

      # 11. Prune Docker system (with volumes)
      - name: Prune Docker system
        run: docker system prune --volumes -f

      # 12. Error Handling
      - name: Fix Errors on Failure
        if: failure()
        run: |
          chmod +x ./fix-errors.sh
          ./fix-errors.sh

      - name: Log Error on Failure
        if: failure()
        run: echo "Error occurred during the caching process"

      # 13. Upload Workflow Logs (optional, for maintainability)
      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: workflow-logs
          path: logs/
