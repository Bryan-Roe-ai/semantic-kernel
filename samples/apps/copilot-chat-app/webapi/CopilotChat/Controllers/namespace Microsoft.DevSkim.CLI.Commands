namespace Microsoft.DevSkim.CLI.Commands
{
    public class FixCommand
    {
        private readonly FixCommandOptions _opts;
        private readonly ILoggerFactory _logFactory;
        private readonly ILogger<FixCommand> _logger;

        public FixCommand(FixCommandOptions options)
        {
            _opts = options;
            _logFactory = _opts.GetLoggerFactory();
            _logger = _logFactory.CreateLogger<FixCommand>();
        }

        public int Run()
        {
            SarifLog sarifLog = SarifLog.Load(_opts.SarifInput);
            if (sarifLog.Runs.Count > 0)
            {
                Run run = sarifLog.Runs[0];
                var groupedResults = run.Results.GroupBy(x => x.Locations[0].PhysicalLocation.ArtifactLocation.Uri);

                if (!_opts.ApplyAllFixes && !_opts.FilesToApplyTo.Any() && !_opts.RulesToApplyFrom.Any())
                {
                    _logger.LogError("Must specify either apply all fixes or a combination of file and rules to apply");
                    return (int)ExitCode.CriticalError;
                }

                if (_opts.FilesToApplyTo.Any())
                {
                    groupedResults = groupedResults.Where(x => _opts.FilesToApplyTo.Any(y => x.Key.AbsolutePath.Contains(y)));
                }

                if (_opts.RulesToApplyFrom.Any())
                {
                    groupedResults = groupedResults.Where(x => _opts.RulesToApplyFrom.Any(y => x.Any(z => z.RuleId == y)));
                }

                groupedResults = groupedResults.ToList();

                foreach (var resultGroup in groupedResults)
                {
                    Uri fileName = resultGroup.Key;
                    string potentialPath = Path.Combine(_opts.Path, fileName.OriginalString);

                    if (File.Exists(potentialPath))
                    {
                        string theContent = File.ReadAllText(potentialPath);
                        int curPos = 0;
                        StringBuilder sb = new StringBuilder();

                        var listOfReplacements = resultGroup.Where(x => x.Fixes is { }).SelectMany(x =>
                            x.Fixes.SelectMany(y => y.ArtifactChanges)
                                .SelectMany(z => z.Replacements)).ToList();

                        listOfReplacements.Sort((a, b) => a.DeletedRegion.CharOffset - b.DeletedRegion.CharOffset);

                        foreach (var replacement in listOfReplacements)
                        {
                            if (replacement.DeletedRegion.CharOffset < curPos)
                            {
                                continue;
                            }

                            sb.Append(theContent[curPos..replacement.DeletedRegion.CharOffset]);
                            sb.Append(replacement.InsertedContent.Text);

                            if (_opts.DryRun)
                            {
                                _logger.LogInformation($"{potentialPath} will be changed: {theContent[replacement.DeletedRegion.CharOffset..(replacement.DeletedRegion.CharOffset + replacement.DeletedRegion.CharLength)]}->{replacement.InsertedContent.Text} @ {replacement.DeletedRegion.CharOffset}");
                            }

                            curPos = replacement.DeletedRegion.CharOffset + replacement.DeletedRegion.CharLength;
                        }

                        sb.Append(theContent[curPos..]);

                        if (!_opts.DryRun)
                        {
                            File.WriteAllText(potentialPath, sb.ToString());
                        }
                    }
                    else
                    {
                        _logger.LogError($"{potentialPath} specified in sarif does not appear to exist on disk.");
                    }
                }
            }

            return (int)ExitCode.NoIssues;
        }
    }
}