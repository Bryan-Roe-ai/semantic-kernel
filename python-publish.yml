# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'  # Specify a fixed Python version

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Notify success
      run: echo "Package published successfully!"

    - name: Run npm start command
      run: npm start

  docker-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        run: |
          docker build . --file Dockerfile --tag my-image-name:$(date +%s)
          docker push ghcr.io/${{ github.repository }}/my-image-name:$(date +%s)

  verify-dependencies:
    runs-on: ubuntu-latest
    needs: docker-setup
    steps:
      - name: Verify installations of dependencies
        run: |
          echo "Verifying installations of dependencies..."
          # Add your verification commands here
          npm list
          pip list
          dotnet --list-sdks

  run-api:
    runs-on: ubuntu-latest
    needs: verify-dependencies
    steps:
      - name: Run the API server
        run: |
          echo "Running the API server..."
          # Add your commands to run the API server here
          npm start
