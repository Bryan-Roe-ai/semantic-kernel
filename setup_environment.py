#!/usr/bin/env python3
"""
Environment Setup for AI Services
Sets up API keys and configuration for Azure OpenAI, OpenAI, and other AI services.
"""

import os
import json
from pathlib import Path
from getpass import getpass

def create_env_template():
    """Create environment template file"""
    template = """# AI Service Configuration
# Copy this file to .env and fill in your actual values

# OpenAI Configuration
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_ORG_ID=your_openai_org_id_here

# Azure OpenAI Configuration
AZURE_OPENAI_API_KEY=your_azure_openai_api_key_here
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_OPENAI_API_VERSION=2024-02-15-preview
AZURE_OPENAI_DEPLOYMENT_NAME=your_deployment_name
AZURE_OPENAI_EMBEDDING_DEPLOYMENT=your_embedding_deployment

# Semantic Kernel Configuration
SK_SERVICE_TYPE=azure_openai  # or 'openai'
SK_LOG_LEVEL=INFO

# Local AI Configuration
LOCAL_AI_MODEL_PATH=/models
LOCAL_AI_DEVICE=auto  # auto, cuda, cpu, mps
LOCAL_AI_MAX_TOKENS=2048

# MCP (Model Context Protocol) Configuration
MCP_SERVER_PORT=8000
MCP_SERVER_HOST=localhost
MCP_ENABLED=true

# Hugging Face Configuration
HUGGINGFACE_API_TOKEN=your_hf_token_here

# GitHub Copilot Configuration (if using API)
GITHUB_TOKEN=your_github_token_here

# Performance Settings
CUDA_VISIBLE_DEVICES=0
OMP_NUM_THREADS=8
PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
"""

    env_template_path = Path('.env.template')
    with open(env_template_path, 'w') as f:
        f.write(template)

    print(f"üìù Created environment template at {env_template_path}")
    return env_template_path

def interactive_setup():
    """Interactive setup for API keys"""
    print("\nüîß Interactive AI Services Setup")
    print("=" * 40)

    env_vars = {}

    # OpenAI Setup
    print("\n1. OpenAI Configuration")
    openai_key = getpass("Enter your OpenAI API key (press Enter to skip): ")
    if openai_key:
        env_vars['OPENAI_API_KEY'] = openai_key
        org_id = input("Enter your OpenAI Organization ID (optional): ")
        if org_id:
            env_vars['OPENAI_ORG_ID'] = org_id

    # Azure OpenAI Setup
    print("\n2. Azure OpenAI Configuration")
    azure_key = getpass("Enter your Azure OpenAI API key (press Enter to skip): ")
    if azure_key:
        env_vars['AZURE_OPENAI_API_KEY'] = azure_key
        endpoint = input("Enter your Azure OpenAI endpoint: ")
        if endpoint:
            env_vars['AZURE_OPENAI_ENDPOINT'] = endpoint
        deployment = input("Enter your deployment name: ")
        if deployment:
            env_vars['AZURE_OPENAI_DEPLOYMENT_NAME'] = deployment
        embedding_deployment = input("Enter your embedding deployment name (optional): ")
        if embedding_deployment:
            env_vars['AZURE_OPENAI_EMBEDDING_DEPLOYMENT'] = embedding_deployment

    # Hugging Face Setup
    print("\n3. Hugging Face Configuration")
    hf_token = getpass("Enter your Hugging Face token (press Enter to skip): ")
    if hf_token:
        env_vars['HUGGINGFACE_API_TOKEN'] = hf_token

    # Service Type Selection
    if env_vars.get('AZURE_OPENAI_API_KEY'):
        env_vars['SK_SERVICE_TYPE'] = 'azure_openai'
    elif env_vars.get('OPENAI_API_KEY'):
        env_vars['SK_SERVICE_TYPE'] = 'openai'
    else:
        env_vars['SK_SERVICE_TYPE'] = 'local'

    return env_vars

def create_env_file(env_vars):
    """Create .env file with provided variables"""
    env_path = Path('.env')

    # Read existing .env if it exists
    existing_vars = {}
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_vars[key] = value

    # Merge with new variables
    existing_vars.update(env_vars)

    # Write updated .env file
    with open(env_path, 'w') as f:
        f.write("# AI Services Configuration\n")
        f.write("# Generated by setup_environment.py\n\n")

        for key, value in existing_vars.items():
            f.write(f"{key}={value}\n")

    print(f"‚úÖ Created/updated .env file at {env_path}")
    return env_path

def create_semantic_kernel_config():
    """Create Semantic Kernel configuration files"""

    # Python configuration
    python_config = {
        "service_type": os.getenv('SK_SERVICE_TYPE', 'openai'),
        "default_headers": {},
        "retry_config": {
            "max_retries": 3,
            "backoff_factor": 2.0
        },
        "timeout": 30.0
    }

    if os.getenv('AZURE_OPENAI_API_KEY'):
        python_config.update({
            "azure_openai": {
                "api_key": "${AZURE_OPENAI_API_KEY}",
                "endpoint": "${AZURE_OPENAI_ENDPOINT}",
                "api_version": "${AZURE_OPENAI_API_VERSION}",
                "deployment_name": "${AZURE_OPENAI_DEPLOYMENT_NAME}",
                "embedding_deployment": "${AZURE_OPENAI_EMBEDDING_DEPLOYMENT}"
            }
        })

    if os.getenv('OPENAI_API_KEY'):
        python_config.update({
            "openai": {
                "api_key": "${OPENAI_API_KEY}",
                "org_id": "${OPENAI_ORG_ID}"
            }
        })

    # Save Python config
    python_config_path = Path('python_sk_config.json')
    with open(python_config_path, 'w') as f:
        json.dump(python_config, f, indent=2)

    print(f"üìù Created Python SK config at {python_config_path}")

    # .NET appsettings.json
    dotnet_config = {
        "Logging": {
            "LogLevel": {
                "Default": "Information",
                "Microsoft.SemanticKernel": "Information"
            }
        }
    }

    if os.getenv('AZURE_OPENAI_API_KEY'):
        dotnet_config["AzureOpenAI"] = {
            "ApiKey": "${AZURE_OPENAI_API_KEY}",
            "Endpoint": "${AZURE_OPENAI_ENDPOINT}",
            "DeploymentName": "${AZURE_OPENAI_DEPLOYMENT_NAME}",
            "EmbeddingDeploymentName": "${AZURE_OPENAI_EMBEDDING_DEPLOYMENT}"
        }

    if os.getenv('OPENAI_API_KEY'):
        dotnet_config["OpenAI"] = {
            "ApiKey": "${OPENAI_API_KEY}",
            "ModelId": "gpt-4"
        }

    dotnet_config_path = Path('appsettings.Development.json')
    with open(dotnet_config_path, 'w') as f:
        json.dump(dotnet_config, f, indent=2)

    print(f"üìù Created .NET config at {dotnet_config_path}")

def setup_gitignore():
    """Ensure sensitive files are in .gitignore"""
    gitignore_path = Path('.gitignore')

    sensitive_files = [
        '.env',
        '.env.local',
        'appsettings.Development.json',
        '*.key',
        'secrets.json',
        'local_ai_config.json'
    ]

    existing_entries = set()
    if gitignore_path.exists():
        with open(gitignore_path, 'r') as f:
            existing_entries = set(line.strip() for line in f if line.strip())

    new_entries = []
    for entry in sensitive_files:
        if entry not in existing_entries:
            new_entries.append(entry)

    if new_entries:
        with open(gitignore_path, 'a') as f:
            f.write("\n# AI Service Configuration (added by setup_environment.py)\n")
            for entry in new_entries:
                f.write(f"{entry}\n")

        print(f"üîí Added {len(new_entries)} entries to .gitignore")

def validate_setup():
    """Validate the environment setup"""
    print("\nüîç Validating setup...")

    env_path = Path('.env')
    if not env_path.exists():
        print("‚ùå .env file not found")
        return False

    # Load environment variables
    with open(env_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                if not value or value.startswith('your_'):
                    continue
                os.environ[key] = value

    # Check for at least one AI service
    has_openai = bool(os.getenv('OPENAI_API_KEY'))
    has_azure = bool(os.getenv('AZURE_OPENAI_API_KEY'))
    has_local = bool(os.getenv('LOCAL_AI_MODEL_PATH'))

    if not any([has_openai, has_azure, has_local]):
        print("‚ö†Ô∏è  No AI services configured")
        return False

    print("‚úÖ Environment validation passed")
    if has_openai:
        print("  ‚úì OpenAI configured")
    if has_azure:
        print("  ‚úì Azure OpenAI configured")
    if has_local:
        print("  ‚úì Local AI configured")

    return True

def main():
    """Main setup function"""
    print("üöÄ AI Services Environment Setup")
    print("=" * 50)

    # Create template
    create_env_template()

    # Interactive setup
    choice = input("\nDo you want to set up API keys interactively? (y/N): ")
    if choice.lower() in ['y', 'yes']:
        env_vars = interactive_setup()
        create_env_file(env_vars)
        create_semantic_kernel_config()
    else:
        print("üí° Please edit .env.template and rename it to .env")

    # Setup .gitignore
    setup_gitignore()

    # Validate
    validate_setup()

    print("\n‚úÖ Setup complete!")
    print("Next steps:")
    print("1. Edit .env file with your actual API keys")
    print("2. Run VS Code tasks to build and test Semantic Kernel")
    print("3. Start MCP server for advanced AI coordination")

if __name__ == "__main__":
    main()
