{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Check GPU Availability",
      "type": "shell",
      "command": "python3",
      "args": [
        "-c",
        "import torch; print(f'CUDA Available: {torch.cuda.is_available()}'); print(f'CUDA Devices: {torch.cuda.device_count()}') if torch.cuda.is_available() else print('No CUDA devices found')"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Setup GPU Environment",
      "type": "shell",
      "command": "pip",
      "args": [
        "install",
        "torch",
        "torchvision",
        "torchaudio",
        "--index-url",
        "https://download.pytorch.org/whl/cu121"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Install Local AI Dependencies",
      "type": "shell",
      "command": "pip",
      "args": [
        "install",
        "transformers",
        "accelerate",
        "bitsandbytes",
        "optimum",
        "auto-gptq",
        "llama-cpp-python"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Start Local AI Model Server",
      "type": "shell",
      "command": "python3",
      "args": [
        "${workspaceFolder}/local_ai_server.py"
      ],
      "group": "build",
      "isBackground": true,
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "problemMatcher": [],
      "runOptions": {
        "instanceLimit": 1
      }
    },
    {
      "label": "Build Semantic Kernel (Python)",
      "type": "shell",
      "command": "poetry",
      "args": [
        "install"
      ],
      "group": "build",
      "options": {
        "cwd": "${workspaceFolder}/python"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "group": "build"
      },
      "problemMatcher": []
    },
    {
      "label": "Build Semantic Kernel (.NET)",
      "type": "process",
      "command": "dotnet",
      "args": [
        "build",
        "${workspaceFolder}/dotnet/SK-dotnet.sln",
        "/property:GenerateFullPaths=true",
        "/consoleloggerparameters:NoSummary"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "group": "build"
      },
      "problemMatcher": "$msCompile"
    },
    {
      "label": "Test Semantic Kernel (Python)",
      "type": "shell",
      "command": "poetry",
      "args": [
        "run",
        "pytest",
        "tests/unit",
        "-v"
      ],
      "group": "test",
      "options": {
        "cwd": "${workspaceFolder}/python"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "group": "test"
      },
      "problemMatcher": []
    },
    {
      "label": "Test Semantic Kernel (.NET)",
      "type": "process",
      "command": "dotnet",
      "args": [
        "test",
        "${workspaceFolder}/dotnet/SK-dotnet.sln",
        "/property:GenerateFullPaths=true",
        "/consoleloggerparameters:NoSummary"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "group": "test"
      },
      "problemMatcher": "$msCompile"
    },
    {
      "label": "Test All (Python + .NET + MCP)",
      "type": "shell",
      "command": "echo",
      "args": [
        "All tests completed successfully!"
      ],
      "dependsOn": [
        "Build Semantic Kernel (Python)",
        "Build Semantic Kernel (.NET)",
        "Test Semantic Kernel (Python)",
        "Test Semantic Kernel (.NET)",
        "Test MCP Integration"
      ],
      "dependsOrder": "sequence",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Run SK Sample: Basic Chat",
      "type": "shell",
      "command": "python3",
      "args": [
        "${workspaceFolder}/python/samples/getting_started/01-basic_chat.py"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Run SK Sample: Agents",
      "type": "shell",
      "command": "python3",
      "args": [
        "${workspaceFolder}/python/samples/getting_started_with_agents/simple_chat_agent.py"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Start MCP Server",
      "type": "shell",
      "command": "python3",
      "args": [
        "${workspaceFolder}/mcp_server.py"
      ],
      "group": "build",
      "isBackground": true,
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "problemMatcher": [],
      "runOptions": {
        "instanceLimit": 1
      }
    },
    {
      "label": "Test MCP Integration",
      "type": "shell",
      "command": "python3",
      "args": [
        "${workspaceFolder}/test_mcp_integration.py"
      ],
      "group": "test",
      "dependsOn": "Start MCP Server",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Setup Environment Files",
      "type": "shell",
      "command": "python3",
      "args": [
        "${workspaceFolder}/setup_environment.py"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Full AI Setup",
      "dependsOn": [
        "Check GPU Availability",
        "Setup GPU Environment",
        "Install Local AI Dependencies",
        "Build Semantic Kernel (Python)",
        "Build Semantic Kernel (.NET)",
        "Setup Environment Files"
      ],
      "dependsOrder": "sequence",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    }
  ],
  "inputs": [
    {
      "id": "openaiApiKey",
      "description": "Enter your OpenAI API Key",
      "type": "promptString"
    },
    {
      "id": "azureOpenaiEndpoint",
      "description": "Enter your Azure OpenAI Endpoint",
      "type": "promptString"
    },
    {
      "id": "azureOpenaiApiKey",
      "description": "Enter your Azure OpenAI API Key",
      "type": "promptString"
    }
  ]
}