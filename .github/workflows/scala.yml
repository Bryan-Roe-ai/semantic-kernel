# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support documentation.

name: Scala CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write  # Keep only if Docker image management is required

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scala-version: [2.12.17, 2.13.10, 3.0.2]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'sbt'

      - name: Cache SBT Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.ivy2/cache
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            ${{ runner.os }}-sbt-

      - name: Run tests
        run: sbt ++${{ matrix.scala-version }} test

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: target/test-reports/

  docker-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=my-image-name:${{ github.ref_name }}-${{ github.sha }}
          docker build . --file Dockerfile --tag $IMAGE_TAG
          docker push ghcr.io/${{ github.repository }}/$IMAGE_TAG

  verify-dependencies:
    runs-on: ubuntu-latest
    needs: docker-setup
    steps:
      - name: Verify Node.js dependencies
        run: npm audit

      - name: Verify Python dependencies
        run: pip check

      - name: Verify .NET dependencies
        run: dotnet restore

      - name: Verify installations of dependencies
        run: |
          echo "Verifying installations of dependencies..."
          npm list
          pip list
          dotnet --list-sdks

  run-api:
    runs-on: ubuntu-latest
    needs: verify-dependencies
    steps:
      - name: Run the API server
        run: |
          echo "Running the API server..."
          npm start

      - name: Health Check
        run: |
          for i in {1..5}; do
            curl --fail http://localhost:3000/health && exit 0 || echo "Retrying health check..."
            sleep 5
          done
          echo "API is not healthy." && exit 1
