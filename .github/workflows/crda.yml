# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support documentation.

# This workflow performs a static analysis of your source code using
# Red Hat CodeReady Dependency Analytics.

# Scans are triggered:
# 1. On every push to default and protected branches
# 2. On every Pull Request targeting the default branch
# 3. On a weekly schedule
# 4. Manually, on demand, via the "workflow_dispatch" event

# üíÅ The CRDA Starter workflow will:
# - Checkout your repository
# - Setup the required tool stack
# - Install the CRDA command line tool
# - Auto detect the manifest file and install the project's dependencies
# - Perform the security scan using CRDA
# - Upload the SARIF result to the GitHub Code Scanning which can be viewed under the security tab
# - Optionally upload the SARIF file as an artifact for the future reference

# ‚ÑπÔ∏è Configure your repository and the workflow with the following steps:
# 1. Setup the tool stack based on the project's requirement.
#    Refer to: https://github.com/redhat-actions/crda/#1-set-up-the-tool-stack
# 2. (Optional) CRDA action attempt to detect the language and install the
#    required dependencies for your project. If your project doesn't aligns
#    with the default dependency installation command mentioned here
#    https://github.com/redhat-actions/crda/#3-installing-dependencies.
#    Use the required inputs to setup the same
# 3. (Optional) CRDA action attempts to detect the manifest file if it is
#    present in the root of the project and named as per the default mentioned
#    here https://github.com/redhat-actions/crda/#3-installing-dependencies.
#    If it deviates from the default, use the required inputs to setup the same
# 4. Setup Authentication - Create the CRDA_KEY or SNYK_TOKEN.
#    Refer to: https://github.com/redhat-actions/crda/#4-set-up-authentication
# 5. (Optional) Upload SARIF file as an Artifact to download and view
# 6. Commit and push the workflow file to your default branch to trigger a workflow run.

# üëã Visit our GitHub organization at https://github.com/redhat-actions/ to see our actions and provide feedback.

name: CRDA Scan

# Controls when the workflow will run
on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    - cron: "0 0 * * 0" # Run weekly on Sunday
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  crda-scan:
    permissions:
      contents: read            # for actions/checkout to fetch code
      security-events: write    # for redhat-actions/crda to upload SARIF results
    name: Scan project vulnerabilities with CRDA
    runs-on: ubuntu-20.04
    steps:

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Validate CRDA_KEY and SNYK_TOKEN
        run: |
          if [ -z "${{ secrets.CRDA_KEY }}" ] && [ -z "${{ secrets.SNYK_TOKEN }}" ]; then
            echo "Either CRDA_KEY or SNYK_TOKEN must be set"
            exit 1
          fi

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'

      - name: Install CRDA CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: github
          github_pat: ${{ github.token }}
          crda: "latest"

      - name: CRDA Scan
        id: scan
        uses: redhat-actions/crda@v1
        with:
          crda_key: ${{ secrets.CRDA_KEY }}           # Either use crda_key or snyk_token
          snyk_token: ${{ secrets.SNYK_TOKEN }}
          upload_artifact: true
