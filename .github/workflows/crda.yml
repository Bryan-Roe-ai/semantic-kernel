# Workflow to scan project vulnerabilities using CRDA

name: CRDA Scan

# Controls when the workflow will run
on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    - cron: "0 3 * * 0" # Run weekly on Sunday at 3 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write # Required for uploading SARIF results

jobs:
  crda-scan:
    name: Scan project vulnerabilities with CRDA
    runs-on: ubuntu-20.04
    permissions:
      contents: read            # For actions/checkout to fetch code
      security-events: write    # For redhat-actions/crda to upload SARIF results

    steps:
      # Step 1: Check out the repository
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 2: Validate Secrets
      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.CRDA_KEY }}" ] && [ -z "${{ secrets.SNYK_TOKEN }}" ]; then
            echo "Either CRDA_KEY or SNYK_TOKEN must be set"
            exit 1
          fi

      # Step 3: Set up programming environments
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 11

      # Step 4: Install CRDA CLI
      - name: Install CRDA CLI
        uses: redhat-actions/openshift-tools-installer@v2
        with:
          source: github
          github_pat: ${{ secrets.GITHUB_TOKEN }}
          crda: "latest"

      # Step 5: Run CRDA scan
      - name: CRDA Scan
        id: scan
        uses: redhat-actions/crda@v2
        with:
          crda_key: ${{ secrets.CRDA_KEY }}           # Either use crda_key or snyk_token
          snyk_token: ${{ secrets.SNYK_TOKEN }}
          upload_artifact: true

      # Step 6: Upload SARIF results as an artifact
      - name: Upload SARIF Results
        uses: actions/upload-artifact@v3
        with:
          name: crda-scan-results
          path: results.sarif

      # Step 7: Cache dependencies (Optional)
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Python modules
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Cache Java dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-java-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-java-

      # Step 8: Notify team about scan results
      - name: Notify Team
        if: always()
        uses: slackapi/slack-github-action@v1.23
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: your-channel-id
          text: 'CRDA scan completed with status: ${{ job.status }}'
