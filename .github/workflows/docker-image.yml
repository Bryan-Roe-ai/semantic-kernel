name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_TAG: ${{ github.run_id }}

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:${{ env.IMAGE_TAG }}

    - name: Fix errors within the docker container
      run: ./fix-errors.sh

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker image to GitHub Container Registry
      run: docker push ghcr.io/${{ github.repository }}/my-image-name:${{ env.IMAGE_TAG }}

    - name: Verify installations of dependencies
      run: |
        echo "Verifying dependencies..."
        npm list || echo "Node.js dependencies not installed"
        pip list || echo "Python dependencies not installed"
        dotnet --list-sdks || echo "DotNet SDKs not installed"

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Validate Secrets
      run: |
        if [ -z "${{ secrets.AZURE_WEBAPP_NAME }}" ] || [ -z "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}" ]; then
          echo "Required secrets are missing!" && exit 1;
        fi

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        images: 'ghcr.io/${{ github.repository }}/my-image-name:${{ env.IMAGE_TAG }}'

    - name: Run the API server
      run: |
        echo "Running the API server..."
        npm start

    - name: Call /start Endpoint
      run: |
        echo "Calling /start endpoint..."
        curl --fail http://localhost:3000/start

    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v4
      with:
        branch: main
        folder: build

  monitor:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Get Docker Container ID
      id: container
      run: echo "CONTAINER_ID=$(docker ps -q --filter ancestor=ghcr.io/${{ github.repository }}/my-image-name:${{ env.IMAGE_TAG }})" >> $GITHUB_ENV

    - name: Monitor Docker container logs
      run: docker logs $CONTAINER_ID

    - name: Set up health checks
      run: |
        for i in {1..5}; do
          docker exec $CONTAINER_ID curl --fail http://localhost:3000/health && break || sleep 5;
        done || exit 1
