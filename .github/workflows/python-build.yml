name: Python Build Assets

on:
  release:
    types: [published]

jobs:
  python-build-assets:
    if: github.event_name == 'release' && startsWith(github.event.release.tag_name, 'python-')
    name: Python Build Assets and add to Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
    permissions:
      contents: write
    env:
      UV_PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.x"
          enable-cache: true
          cache-suffix: ${{ runner.os }}-${{ matrix.python-version }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
      - name: Install dependencies
        run: |
          cd python
          pip install -r requirements.txt
      - name: Clean workspace
        run: |
          cd python
          rm -rf build dist *.egg-info
      - name: Check version
        run: |
          echo "Building and uploading Python package version: ${{ github.event.release.tag_name }}"
          echo "Python version: $(python --version)"
          echo "Pip version: $(pip --version)"
      - name: Build the package
        run: cd python && make build || { echo 'Build failed'; exit 1; }
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            python/dist/*

  docker-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        run: |
          docker build . --file Dockerfile --tag my-image-name:$(date +%s)
          docker push ghcr.io/${{ github.repository }}/my-image-name:$(date +%s)

  verify-dependencies:
    runs-on: ubuntu-latest
    needs: docker-setup
    steps:
      - name: Verify installations of dependencies
        run: |
          echo "Verifying installations of dependencies..."
          # Add your verification commands here
          npm list
          pip list
          dotnet --list-sdks

  run-api:
    runs-on: ubuntu-latest
    needs: verify-dependencies
    steps:
      - name: Run the API server
        run: |
          echo "Running the API server..."
          # Add your commands to run the API server here
          npm start
