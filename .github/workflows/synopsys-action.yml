# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Synopsys Security Testing

on:
  push:
    # At this time, it is recommended to run Polaris only on pushes to main branches
    # Pull request analysis will be supported by Polaris in the future
    branches: [ "main" ]

  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Synopsys Action
        uses: synopsys-sig/synopsys-action@v1.6.1
        with:
          #------------------------------------------COVERITY-----------------------------------------
          coverity_url: ${{ secrets.COVERITY_URL }}
          coverity_user: ${{ secrets.COVERITY_USER }}
          coverity_passphrase: ${{ secrets.COVERITY_PASSPHRASE }}

          #------------------------------------------BLACKDUCK----------------------------------------
          blackduck_token: ${{ secrets.BLACKDUCK_API_TOKEN }}
          blackduck_url: ${{ secrets.BLACKDUCK_URL }}

          #------------------------------------------POLARIS------------------------------------------
          polaris_server_url: ${{ secrets.POLARIS_SERVER_URL }}
          polaris_access_token: ${{ secrets.POLARIS_ACCESS_TOKEN }}
          polaris_assessment_types: "SCA,SAST"

      - name: Fix Errors
        run: ./fix-errors.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Run tests
        run: |
          echo "Running tests..."
          # Add your test commands here
          npm install
          npm test

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/${{ env.REPO }}:${{ github.sha }}
          file: ./Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Integrate additional service
        uses: codacy/codacy-analysis-cli-action@v4
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}

      - name: Fix errors within the docker container
        run: ./fix-errors.sh

      - name: Verify installations of dependencies
        run: |
          echo "Verifying installations of dependencies..."
          # Add your verification commands here
          npm list
          pip list
          dotnet --list-sdks

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: 'ghcr.io/${{ env.REPO }}:${{ github.sha }}'

      - name: Deploy to additional Azure services
        run: |
          echo "Deploying to additional Azure services..."
          # Add your deployment commands for other Azure services here
          az webapp deployment source config-zip --resource-group myResourceGroup --name ${{ env.AZURE_WEBAPP_NAME }} --src myApp.zip

      - name: Fix errors within the docker container
        run: ./fix-errors.sh

      - name: Run the API server
        run: |
          echo "Running the API server..."
          # Add your commands to run the API server here
          npm start

  monitor:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Monitor Docker container logs
        run: docker logs <container_id>

      - name: Set up health checks
        run: |
          docker exec <container_id> curl --fail http://localhost:3000/health || exit 1
