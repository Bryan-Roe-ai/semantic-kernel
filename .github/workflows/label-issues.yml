name: Label issues

on:
  issues:
    types:
      - reopened
      - opened

jobs:
  label_issues:
    name: "Issue: add labels"
    if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' }}
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Label issues based on content
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_ACTIONS_PR_WRITE }}
          script: |
            // Get the issue body and title
            const body = context.payload.issue.body;
            const title = context.payload.issue.title;

            // Define the labels array
            let labels = ["triage"];

            // Define label criteria
            const criteria = [
              { keyword: /python/i, label: "python" },
              { keyword: /java/i, label: "java" },
              { keyword: /(\.net|dotnet|c#|csharp)/i, label: ".NET" }
            ];

            // Check if the body or title contains any of the keywords
            criteria.forEach(({ keyword, label }) => {
              if ((body && body.match(keyword)) || (title && title.match(keyword))) {
                labels.push(label);
              }
            });

            // Add the labels to the issue
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels
            });

      - name: Auto-assign issues based on labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_ACTIONS_PR_WRITE }}
          script: |
            // Get the issue and its labels
            const issue = context.payload.issue;
            const labels = issue.labels.map(label => label.name);

            // Define the assignment criteria
            const criteria = {
              "python": "team-python",
              "java": "team-java",
              ".NET": "team-dotnet"
            };

            // Find the assignee based on the labels
            let assignee = null;
            for (const [label, team] of Object.entries(criteria)) {
              if (labels.includes(label)) {
                assignee = team;
                break;
              }
            }

            // Assign the issue if an assignee is found
            if (assignee) {
              await github.rest.issues.addAssignees({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                assignees: [assignee]
              });
            }
