name: .NET Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # Removed macOS for optimization
        dotnet-version: [6.0.x, 7.0.x]      # Removed unsupported versions
    timeout-minutes: 60

    steps:
      # Check out the repository
      - uses: actions/checkout@v4

      # Cache dependencies
      - uses: actions/cache@v3
        with:
          path: |
            ~/.nuget/packages
            ~/.dotnet/tools
          key: ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}-${{ hashFiles('**/*.csproj', '**/*.fsproj', '**/*.props', '**/*.targets') }}
          restore-keys: |
            ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}-
            ${{ runner.os }}-nuget-

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Build the project
      - name: Build
        run: dotnet build --no-restore

      # Code Quality Analysis
      - name: Code Quality Analysis
        run: dotnet format

      # Run Tests
      - name: Test
        run: dotnet test --no-build --verbosity normal --logger "trx;LogFileName=test_results.trx"

      # Collect Code Coverage
      - name: Collect Code Coverage
        run: dotnet test --collect:"Code Coverage"

      # Publish Test Results
      - name: Publish Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: '**/test_results.trx'

      # Notify on Slack
      - name: Notify on Slack
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            Build ${{ github.run_id }} finished with status ${{ job.status }}.
            Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
            Author: ${{ github.actor }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub container registry
      - name: Log in to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # Lowercase the repo name and username
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      # Build and push container image to registry
      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/${{ env.REPO }}:${{ github.sha }}
          file: ./Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Verify installations of dependencies
      - name: Verify installations of dependencies
        run: |
          echo "Verifying installations of dependencies..."
          npm list
          pip list
          dotnet --list-sdks

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Validate secrets
      - name: Validate secrets
        run: |
          if [ -z "${{ secrets.AZURE_WEBAPP_NAME }}" ] || [ -z "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}" ]; then
            echo "Azure Web App secrets are not set"; exit 1;
          fi

      # Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: 'ghcr.io/${{ github.repository }}:${{ github.sha }}'

      # Run the API server
      - name: Run the API server
        run: |
          echo "Running the API server..."
          npm start

  monitor:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      # Monitor Docker container logs
      - name: Monitor Docker container logs
        run: |
          container_id=$(docker ps -q --filter "ancestor=my-image-name")
          docker logs $container_id

      # Set up health checks with alerts
      - name: Set up health checks
        run: |
          container_id=$(docker ps -q --filter "ancestor=my-image-name")
          docker exec $container_id curl --fail http://localhost:3000/health || echo "Health check failed" | notify-send
