name: Python Unit Tests

on:
  pull_request:
    branches: ["main", "feature*"]
    paths:
      - "python/**"
env:
  # Configure a constant location for the uv cache
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  python-unit-tests:
    name: Python Unit Tests
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        experimental: [false]
        # include:
        #   - python-version: "3.13"
        #     os: "ubuntu-latest"
        #     experimental: true
        #   - python-version: "3.13t"
        #     os: "ubuntu-latest"
        #     experimental: true
        #     gil: 0
        #   - python-version: "3.13t"
        #     os: "ubuntu-latest"
        #     experimental: true
        #     gil: 1
    env:
      UV_PYTHON: ${{ matrix.python-version }}
    permissions:
      contents: write
    defaults:
      run:
        working-directory: python
    steps:
      - uses: actions/checkout@v4
      - name: Set up uv
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up uv
        if: ${{ matrix.os == 'windows-latest' }}
        run: irm https://astral.sh/uv/install.ps1 | iex
        shell: powershell
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        experimental: [false]
        include:
          - python-version: "3.13.0-beta.4"
            os: "ubuntu-latest"
            experimental: true
    permissions:
      contents: write
    defaults:
      run:
        working-directory: python
    steps:
      - uses: actions/checkout@v4
      - name: Set up uv
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up uv
        if: ${{ matrix.os == 'windows-latest' }}
        run: irm https://astral.sh/uv/install.ps1 | iex
        shell: powershell
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        experimental: [false]
        include:
          - python-version: "3.13.0-beta.4"
            os: "ubuntu-latest"
            experimental: true
    permissions:
      contents: write
    defaults:
      run:
        working-directory: python
    steps:
      - uses: actions/checkout@v4
      - name: Set up uv
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up uv
        if: ${{ matrix.os == 'windows-latest' }}
        run: irm https://astral.sh/uv/install.ps1 | iex
        shell: powershell
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.5.x"
          enable-cache: true
          cache-suffix: ${{ runner.os }}-${{ matrix.python-version }}
      - name: Install the project
        run: uv sync --all-extras --dev
      - name: Test with pytest
        env:
          PYTHON_GIL: ${{ matrix.gil }}
        run: uv run --frozen pytest --junitxml=pytest.xml ./tests/unit
      - name: Surface failing tests
        if: ${{ !matrix.experimental }}
        uses: pmeier/pytest-results-action@main
        with:
          path: python/pytest.xml
          summary: true
          display-options: fEX
          fail-on-empty: true
          title: Test results
  python-test-coverage:
    name: Python Test Coverage
    runs-on: [ubuntu-latest]
    continue-on-error: true
    permissions:
      contents: write
    defaults:
      run:
        working-directory: python
    env:
      UV_PYTHON: "3.10"
    steps:
      - uses: actions/checkout@v4
      - name: Setup filename variables
        run: echo "FILE_ID=${{ github.event.number }}" >> $GITHUB_ENV
      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.5.x"
          enable-cache: true
          cache-suffix: ${{ runner.os }}-${{ env.UV_PYTHON }}
      - name: Install the project
        run: uv sync --all-extras --dev
      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Install dependencies
        run: |
          python -m pip install poetry pytest
          cd python
          poetry install --without chromadb --without hugging_face --without azure_cognitive_search --without weaviate --without pinecone --without postgres --without qdrant --without redis
          poetry install --without chromadb --without hugging_face --without azure_cognitive_search --without weaviate --without pinecone --without postgres --without qdrant
      - name: Test with pytest
        run: uv run --frozen pytest -q --junitxml=pytest.xml  --cov=semantic_kernel --cov-report=term-missing:skip-covered ./tests/unit | tee python-coverage.txt
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage-${{ env.FILE_ID }}.txt
          path: python/python-coverage.txt
          overwrite: true
          retention-days: 1
      - name: Upload pytest.xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-${{ env.FILE_ID }}.xml
          path: python/pytest.xml
          overwrite: true
          retention-days: 1
      - name: Minimize uv cache
        run: uv cache prune --ci
          cache: "poetry"
      - name: Install dependencies
        run: cd python && poetry install --without chromadb --without azure_cognitive_search --without weaviate --without pinecone --without postgres --without qdrant --without redis
      - name: Test with pytest
        run: cd python && poetry run pytest -q --junitxml=pytest-${{ matrix.os }}-${{ matrix.python-version }}.xml  --cov=semantic_kernel --cov-report=term-missing:skip-covered ./tests/unit | tee python-coverage-${{ matrix.os }}-${{ matrix.python-version }}.txt
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage-${{ matrix.os }}-${{ matrix.python-version }}.txt
          path: python/python-coverage-${{ matrix.os }}-${{ matrix.python-version }}.txt
          overwrite: true
          retention-days: 1  
      - name: Upload pytest.xml
        uses: actions/upload-artifact@v4
        with:
          name: pytest-${{ matrix.os }}-${{ matrix.python-version }}.xml
          path: python/pytest-${{ matrix.os }}-${{ matrix.python-version }}.xml
          overwrite: true
          retention-days: 1
